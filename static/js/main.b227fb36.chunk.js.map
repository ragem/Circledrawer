{"version":3,"sources":["serviceWorker.js","Components/CircleDrawer/index.js","Components/CircleDrawer/CircleDrawer.component.js","index.js"],"names":["Boolean","window","location","hostname","match","CircleDrawer","radiusInput","React","createRef","adjInputX","adjInputY","canvas","DrawCanvas","x1","y1","state","mouseDown","checked","this","drawLines","current","getBoundingClientRect","ctx","getContext","beginPath","moveTo","width","lineTo","height","stroke","startX","startY","radius","color","fill","fillStyle","x","y","parseInt","dP","fillRect","clearRect","e","lastRadius","x2","clientX","left","y2","clientY","top","Math","sqrt","drawCircle","setState","value","adjX","adjY","className","htmlFor","id","type","defaultChecked","onChange","toggleCheckedState","ref","disabled","onMouseDown","startUserCircleDraw","onMouseUp","stopUserCircleDraw","onMouseMove","drawUserMovingCircle","renderFromCenter","onClick","drawPointCircle","clearCanvas","renderCanvas","PureComponent","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0LAaoBA,QACa,cAA7BC,OAAOC,SAASC,UAEgB,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACxB,2D,uCCjBOC,G,kBCEX,aAAe,IAAD,8BACV,+CACKC,YAAcC,IAAMC,YACzB,EAAKC,UAAYF,IAAMC,YACvB,EAAKE,UAAYH,IAAMC,YACvB,EAAKG,OAASJ,IAAMC,YACpB,EAAKI,WAAaL,IAAMC,YACxB,EAAKK,GAAKN,IAAMC,YAChB,EAAKM,GAAKP,IAAMC,YAEhB,EAAKO,MAAQ,CACTC,WAAW,EACXC,SAAS,GAZH,E,iFAiBVC,KAAKC,c,kCAIL,IAAMR,EAASO,KAAKP,OAAOS,QAAQC,wBAC7BC,EAAMJ,KAAKP,OAAOS,QAAQG,WAAW,MAC3CD,EAAIE,YACJF,EAAIG,OAAOd,EAAOe,MAAQ,EAAG,GAC7BJ,EAAIK,OAAOhB,EAAOe,MAAQ,EAAGf,EAAOiB,QACpCN,EAAIO,SAEJP,EAAIE,YACJF,EAAIG,OAAO,EAAGd,EAAOiB,QACrBN,EAAIK,OAAOhB,EAAOe,MAAO,GACzBJ,EAAIO,SAEJP,EAAIE,YACJF,EAAIG,OAAOd,EAAOe,MAAOf,EAAOiB,QAChCN,EAAIK,OAAO,EAAG,GACdL,EAAIO,SAEJP,EAAIE,YACJF,EAAIG,OAAO,EAAGd,EAAOiB,OAAS,GAC9BN,EAAIK,OAAOhB,EAAOe,MAAOf,EAAOe,MAAQ,GACxCJ,EAAIO,W,iCAGGC,EAAQC,EAAQC,GAAkF,IAA1EC,EAAyE,uDAAjE,OAAQX,EAAyD,uDAAnDJ,KAAKP,OAAOS,QAAQG,WAAW,MAAOW,IAAa,yDACxGZ,EAAIa,UAAYF,EAKhB,IAJA,IAAIG,EAAI,EACJC,EAAIC,SAASN,EAAQ,IACrBO,EAAK,EAAI,EAAIP,EAEVK,GAAKD,GACRA,IAGIG,EAFAA,EAAK,EAEAA,EAAK,GAAKH,KADfC,GACwB,GAEnBE,EAAK,EAAIH,EAAI,EAElBF,GACAZ,EAAIkB,SAASV,EAASM,EAAGL,EAASM,EAAG,EAAG,GACxCf,EAAIkB,SAASV,EAASM,EAAGL,EAASM,EAAG,EAAG,GACxCf,EAAIkB,SAASV,EAASM,EAAGL,EAASM,EAAG,EAAG,GACxCf,EAAIkB,SAASV,EAASM,EAAGL,EAASM,EAAG,EAAG,GACxCf,EAAIkB,SAASV,EAASO,EAAGN,EAASK,EAAG,EAAG,GACxCd,EAAIkB,SAASV,EAASO,EAAGN,EAASK,EAAG,EAAG,GACxCd,EAAIkB,SAASV,EAASO,EAAGN,EAASK,EAAG,EAAG,GACxCd,EAAIkB,SAASV,EAASO,EAAGN,EAASK,EAAG,EAAG,KAExCd,EAAImB,UAAUX,EAASM,EAAGL,EAASM,EAAG,EAAG,GACzCf,EAAImB,UAAUX,EAASM,EAAGL,EAASM,EAAG,EAAG,GACzCf,EAAImB,UAAUX,EAASM,EAAGL,EAASM,EAAG,EAAG,GACzCf,EAAImB,UAAUX,EAASM,EAAGL,EAASM,EAAG,EAAG,GACzCf,EAAImB,UAAUX,EAASO,EAAGN,EAASK,EAAG,EAAG,GACzCd,EAAImB,UAAUX,EAASO,EAAGN,EAASK,EAAG,EAAG,GACzCd,EAAImB,UAAUX,EAASO,EAAGN,EAASK,EAAG,EAAG,GACzCd,EAAImB,UAAUX,EAASO,EAAGN,EAASK,EAAG,EAAG,M,2CAKhCM,GAAI,IAAD,EAGhBxB,KAAKH,MADLC,EAFgB,EAEhBA,UAAWc,EAFK,EAELA,OAAQC,EAFH,EAEGA,OAAQY,EAFX,EAEWA,WAE/B,GAAI3B,EAAW,CACX,IAAML,EAASO,KAAKP,OAAOS,QAAQC,wBAC7BC,EAAMJ,KAAKN,WAAWQ,QAAQG,WAAW,MACzCqB,EAAKF,EAAEG,QAAUlC,EAAOmC,KACxBC,EAAKL,EAAEM,QAAUrC,EAAOsC,IACxBjB,EAASkB,KAAKC,KAAK,SAACP,EAAKd,EAAW,GAAjB,SAAsBiB,EAAKhB,EAAW,IAE/Db,KAAKkC,WAAWtB,EAAQC,EAAQY,EAAY,OAAQrB,GAAK,GACzDJ,KAAKkC,WAAWtB,EAAQC,EAAQC,EAAQ,OAAQV,GAChDJ,KAAKmC,SAAS,CAAEV,WAAYX,O,oCAKhC,IAAMrB,EAASO,KAAKP,OAAOS,QAAQC,wBACvBH,KAAKP,OAAOS,QAAQG,WAAW,MACvCkB,UAAU,EAAG,EAAG9B,EAAOe,MAAOf,EAAOiB,QACzCV,KAAKC,c,0CAGWuB,GAChB,IAAM/B,EAASO,KAAKP,OAAOS,QAAQC,wBACnCH,KAAKmC,SAAS,CACVrC,WAAW,EACXc,OAAQY,EAAEG,QAAUlC,EAAOmC,KAC3Bf,OAAQW,EAAEM,QAAUrC,EAAOsC,Q,2CAIb,IAAD,EAGb/B,KAAKH,MADLe,EAFa,EAEbA,OAAQC,EAFK,EAELA,OAAQY,EAFH,EAEGA,WAEpBzB,KAAKmC,SAAS,CAAErC,WAAW,IAC3B,IAAML,EAASO,KAAKN,WAAWQ,QAAQC,wBAC3BH,KAAKN,WAAWQ,QAAQG,WAAW,MAC3CkB,UAAU,EAAG,EAAG9B,EAAOe,MAAOf,EAAOiB,QACzCV,KAAKkC,WAAWtB,EAAQC,EAAQY,GAChCzB,KAAKmC,SAAS,CAAEV,WAAY,M,wCAGb,IACP1B,EAAYC,KAAKH,MAAjBE,QACFN,EAASO,KAAKN,WAAWQ,QAAQC,wBACjCS,EAAUb,EAAgDN,EAAOe,MAAQ,EAArDY,SAASpB,KAAKL,GAAGO,QAAQkC,MAAO,IACpDvB,EAAUd,EAAgDN,EAAOiB,OAAS,EAAtDU,SAASpB,KAAKJ,GAAGM,QAAQkC,MAAO,IAE1D,GAAIpC,KAAKZ,YAAYc,QAAQkC,MACzBpC,KAAKkC,WAAWtB,EAAQC,EAAQb,KAAKZ,YAAYc,QAAQkC,WACtD,CACH,IAAMC,EAAOrC,KAAKT,UAAUW,QAAQkC,MAC9BE,EAAOtC,KAAKR,UAAUU,QAAQkC,MAC9BtB,EAASkB,KAAKC,KAAK,SAACI,EAAOzB,EAAW,GAAnB,SAAwB0B,EAAOzB,EAAW,IACnEb,KAAKkC,WAAWtB,EAAQC,EAAQC,M,2CAIlB,IACVf,EAAYC,KAAKH,MAAjBE,QACRC,KAAKmC,SAAS,CAAEpC,SAAUA,M,yCAGV,IAAD,OACPA,EAAYC,KAAKH,MAAjBE,QACR,OACI,oCACI,2BAAOwC,UAAU,cAAcC,QAAQ,kBAAvC,uBAEI,2BACEC,GAAG,iBACHC,KAAK,WACLC,eAAiB5C,EACjB6C,SAAW,kBAAM,EAAKC,yBAG5B,2BACEL,QAAQ,KACRD,UAAU,eAFZ,KAKI,2BACEE,GAAG,KACHC,KAAK,SACLH,UAAU,YACVO,IAAM9C,KAAKL,GACXoD,SAAWhD,KAGjB,2BACEyC,QAAQ,KACRD,UAAU,eAFZ,KAKI,2BACEE,GAAG,KACHC,KAAK,SACLH,UAAU,YACVO,IAAM9C,KAAKJ,GACXmD,SAAWhD,Q,qCAOb,IAAD,OACX,OACI,oCACI,4BACE+C,IAAM9C,KAAKP,OACX8C,UAAU,SACV/B,MAAQ,IACRE,OAAS,MAEX,4BACEoC,IAAM9C,KAAKN,WACX6C,UAAU,cACV/B,MAAQ,IACRE,OAAS,IACTsC,YAAc,SAACxB,GAAD,OAAO,EAAKyB,oBAAoBzB,IAC9C0B,UAAY,kBAAM,EAAKC,sBACvBC,YAAc,SAAC5B,GAAD,OAAO,EAAK6B,qBAAqB7B,MAEjD,yBACEe,UAAU,WAENvC,KAAKsD,mBACP,2BACEd,QAAQ,KACRD,UAAU,eAFZ,SAKI,2BACEE,GAAG,KACHC,KAAK,SACLH,UAAU,YACVO,IAAM9C,KAAKZ,eAGjB,2BACEoD,QAAQ,OACRD,UAAU,eAFZ,aAKI,2BACEE,GAAG,OACHC,KAAK,SACLH,UAAU,YACVO,IAAM9C,KAAKT,aAGjB,2BACEiD,QAAQ,OACRD,UAAU,eAFZ,aAKI,2BACEE,GAAG,OACHC,KAAK,SACLH,UAAU,YACVO,IAAM9C,KAAKR,aAGjB,4BACE+C,UAAU,UACVgB,QAAU,kBAAM,EAAKC,oBAFvB,QAMA,4BACEjB,UAAU,UACVgB,QAAU,kBAAM,EAAKE,gBAFvB,oB,+BAYZ,OACIzD,KAAK0D,mB,GA3QUC,kBCG3BC,IAASC,OAAO,kBAAC,EAAD,MAAkBC,SAASC,eAAe,SH+HlD,kBAAmBC,WACnBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAChCA,EAAaC,iB","file":"static/js/main.b227fb36.chunk.js","sourcesContent":["// eslint-disable-next-line\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost'\n    // [::1] is the IPv6 localhost address.\n    || window.location.hostname === '[::1]'\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    || window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                // eslint-disable-next-line no-use-before-define\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service '\n              + 'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                // eslint-disable-next-line no-use-before-define\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then((registration) => {\n            // eslint-disable-next-line no-param-reassign\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all '\n                  + 'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch((error) => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then((response) => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404\n        || (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then((registration) => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then((registration) => {\n            registration.unregister();\n        });\n    }\n}\n","import CircleDrawer from './CircleDrawer.component';\n\nexport default CircleDrawer;\n","import React, { PureComponent } from 'react';\nimport './CircleDrawer.style.scss';\n\nclass CircleDrawer extends PureComponent {\n    constructor() {\n        super();\n        this.radiusInput = React.createRef();\n        this.adjInputX = React.createRef();\n        this.adjInputY = React.createRef();\n        this.canvas = React.createRef();\n        this.DrawCanvas = React.createRef();\n        this.x1 = React.createRef();\n        this.y1 = React.createRef();\n\n        this.state = {\n            mouseDown: false,\n            checked: true\n        };\n    }\n\n    componentDidMount() {\n        this.drawLines();\n    }\n\n    drawLines() {\n        const canvas = this.canvas.current.getBoundingClientRect();\n        const ctx = this.canvas.current.getContext('2d');\n        ctx.beginPath();\n        ctx.moveTo(canvas.width / 2, 0);\n        ctx.lineTo(canvas.width / 2, canvas.height);\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.moveTo(0, canvas.height);\n        ctx.lineTo(canvas.width, 0);\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.moveTo(canvas.width, canvas.height);\n        ctx.lineTo(0, 0);\n        ctx.stroke();\n\n        ctx.beginPath();\n        ctx.moveTo(0, canvas.height / 2);\n        ctx.lineTo(canvas.width, canvas.width / 2);\n        ctx.stroke();\n    }\n\n    drawCircle(startX, startY, radius, color = '#000', ctx = this.canvas.current.getContext('2d'), fill = true) {\n        ctx.fillStyle = color;\n        let x = 0;\n        let y = parseInt(radius, 10);\n        let dP = 3 - 2 * radius;\n\n        while (y >= x) {\n            x++;\n            if (dP > 0) {\n                y--;\n                dP = dP + 4 * (x - y) + 10;\n            } else {\n                dP = dP + 4 * x + 6;\n            }\n            if (fill) {\n                ctx.fillRect(startX + x, startY + y, 1, 1);\n                ctx.fillRect(startX - x, startY + y, 1, 1);\n                ctx.fillRect(startX + x, startY - y, 1, 1);\n                ctx.fillRect(startX - x, startY - y, 1, 1);\n                ctx.fillRect(startX + y, startY + x, 1, 1);\n                ctx.fillRect(startX - y, startY + x, 1, 1);\n                ctx.fillRect(startX + y, startY - x, 1, 1);\n                ctx.fillRect(startX - y, startY - x, 1, 1);\n            } else {\n                ctx.clearRect(startX + x, startY + y, 1, 1);\n                ctx.clearRect(startX - x, startY + y, 1, 1);\n                ctx.clearRect(startX + x, startY - y, 1, 1);\n                ctx.clearRect(startX - x, startY - y, 1, 1);\n                ctx.clearRect(startX + y, startY + x, 1, 1);\n                ctx.clearRect(startX - y, startY + x, 1, 1);\n                ctx.clearRect(startX + y, startY - x, 1, 1);\n                ctx.clearRect(startX - y, startY - x, 1, 1);\n            }\n        }\n    }\n\n    drawUserMovingCircle(e) {\n        const {\n            mouseDown, startX, startY, lastRadius\n        } = this.state;\n        if (mouseDown) {\n            const canvas = this.canvas.current.getBoundingClientRect();\n            const ctx = this.DrawCanvas.current.getContext('2d');\n            const x2 = e.clientX - canvas.left;\n            const y2 = e.clientY - canvas.top;\n            const radius = Math.sqrt((x2 - startX) ** 2 + (y2 - startY) ** 2);\n\n            this.drawCircle(startX, startY, lastRadius, '#fff', ctx, false);\n            this.drawCircle(startX, startY, radius, '#000', ctx);\n            this.setState({ lastRadius: radius });\n        }\n    }\n\n    clearCanvas() {\n        const canvas = this.canvas.current.getBoundingClientRect();\n        const ctx = this.canvas.current.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawLines();\n    }\n\n    startUserCircleDraw(e) {\n        const canvas = this.canvas.current.getBoundingClientRect();\n        this.setState({\n            mouseDown: true,\n            startX: e.clientX - canvas.left,\n            startY: e.clientY - canvas.top\n        });\n    }\n\n    stopUserCircleDraw() {\n        const {\n            startX, startY, lastRadius\n        } = this.state;\n        this.setState({ mouseDown: false });\n        const canvas = this.DrawCanvas.current.getBoundingClientRect();\n        const ctx = this.DrawCanvas.current.getContext('2d');\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n        this.drawCircle(startX, startY, lastRadius);\n        this.setState({ lastRadius: 0 });\n    }\n\n    drawPointCircle() {\n        const { checked } = this.state;\n        const canvas = this.DrawCanvas.current.getBoundingClientRect();\n        const startX = !checked ? parseInt(this.x1.current.value, 10) : canvas.width / 2;\n        const startY = !checked ? parseInt(this.y1.current.value, 10) : canvas.height / 2;\n\n        if (this.radiusInput.current.value) {\n            this.drawCircle(startX, startY, this.radiusInput.current.value);\n        } else {\n            const adjX = this.adjInputX.current.value;\n            const adjY = this.adjInputY.current.value;\n            const radius = Math.sqrt((adjX - startX) ** 2 + (adjY - startY) ** 2);\n            this.drawCircle(startX, startY, radius);\n        }\n    }\n\n    toggleCheckedState() {\n        const { checked } = this.state;\n        this.setState({ checked: !checked });\n    }\n\n    renderFromCenter() {\n        const { checked } = this.state;\n        return (\n            <>\n                <label className=\"coord-input\" htmlFor=\"centerCheckbox\">\n                    X1 and Y1 are center\n                    <input\n                      id=\"centerCheckbox\"\n                      type=\"checkbox\"\n                      defaultChecked={ checked }\n                      onChange={ () => this.toggleCheckedState() }\n                    />\n                </label>\n                <label\n                  htmlFor=\"x1\"\n                  className=\"coord-input\"\n                >\n                    X1\n                    <input\n                      id=\"x1\"\n                      type=\"number\"\n                      className=\"radiusbox\"\n                      ref={ this.x1 }\n                      disabled={ checked }\n                    />\n                </label>\n                <label\n                  htmlFor=\"y1\"\n                  className=\"coord-input\"\n                >\n                    Y1\n                    <input\n                      id=\"y1\"\n                      type=\"number\"\n                      className=\"radiusbox\"\n                      ref={ this.y1 }\n                      disabled={ checked }\n                    />\n                </label>\n            </>\n        );\n    }\n\n    renderCanvas() {\n        return (\n            <>\n                <canvas\n                  ref={ this.canvas }\n                  className=\"Canvas\"\n                  width={ 500 }\n                  height={ 500 }\n                />\n                <canvas\n                  ref={ this.DrawCanvas }\n                  className=\"Draw-canvas\"\n                  width={ 500 }\n                  height={ 500 }\n                  onMouseDown={ (e) => this.startUserCircleDraw(e) }\n                  onMouseUp={ () => this.stopUserCircleDraw() }\n                  onMouseMove={ (e) => this.drawUserMovingCircle(e) }\n                />\n                <div\n                  className=\"wrapper\"\n                >\n                    { this.renderFromCenter() }\n                    <label\n                      htmlFor=\"x1\"\n                      className=\"coord-input\"\n                    >\n                        Radius\n                        <input\n                          id=\"x1\"\n                          type=\"number\"\n                          className=\"radiusbox\"\n                          ref={ this.radiusInput }\n                        />\n                    </label>\n                    <label\n                      htmlFor=\"adjx\"\n                      className=\"coord-input\"\n                    >\n                        Pieskare X\n                        <input\n                          id=\"adjx\"\n                          type=\"number\"\n                          className=\"radiusbox\"\n                          ref={ this.adjInputX }\n                        />\n                    </label>\n                    <label\n                      htmlFor=\"adjy\"\n                      className=\"coord-input\"\n                    >\n                        Pieskare Y\n                        <input\n                          id=\"adjy\"\n                          type=\"number\"\n                          className=\"radiusbox\"\n                          ref={ this.adjInputY }\n                        />\n                    </label>\n                    <button\n                      className=\"drawbtn\"\n                      onClick={ () => this.drawPointCircle() }\n                    >\n                    Draw\n                    </button>\n                    <button\n                      className=\"drawbtn\"\n                      onClick={ () => this.clearCanvas() }\n                    >\n                    Clear canvas\n                    </button>\n                </div>\n            </>\n        );\n    }\n\n    render() {\n        return (\n            this.renderCanvas()\n        );\n    }\n}\n\nexport default CircleDrawer;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport CircleDrawer from './Components/CircleDrawer';\n\nReactDOM.render(<CircleDrawer />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}